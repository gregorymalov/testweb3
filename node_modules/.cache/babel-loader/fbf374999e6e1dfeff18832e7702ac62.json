{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _forEachInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseFileEncode = require(\"./ParseFileEncode\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context2, _context3;\n\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty(_context2 = ownKeys(Object(source), !0)).call(_context2, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) {\n      _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar XHR = null;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  XHR = XMLHttpRequest;\n}\n\nvar DefaultController = {\n  saveFile: function () {\n    var _saveFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(name\n    /*: string*/\n    , source\n    /*: FileSource*/\n    , options\n    /*:: ?: FullOptions*/\n    ) {\n      var base64Data, _base64Data$split, _base64Data$split2, first, second, data, newSource;\n\n      return _regenerator.default.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(source.format !== 'file')) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('saveFile can only be used with File-type sources.');\n\n            case 2:\n              _context.next = 4;\n              return new _promise.default(function (res, rej) {\n                // eslint-disable-next-line no-undef\n                var reader = new FileReader();\n\n                reader.onload = function () {\n                  return res(reader.result);\n                };\n\n                reader.onerror = function (error) {\n                  return rej(error);\n                };\n\n                reader.readAsDataURL(source.file);\n              });\n\n            case 4:\n              base64Data = _context.sent; // we only want the data after the comma\n              // For example: \"data:application/pdf;base64,JVBERi0xLjQKJ...\" we would only want \"JVBERi0xLjQKJ...\"\n\n              _base64Data$split = base64Data.split(','), _base64Data$split2 = (0, _slicedToArray2.default)(_base64Data$split, 2), first = _base64Data$split2[0], second = _base64Data$split2[1]; // in the event there is no 'data:application/pdf;base64,' at the beginning of the base64 string\n              // use the entire string instead\n\n              data = second ? second : first;\n              newSource = {\n                format: 'base64',\n                base64: data,\n                type: source.type || (source.file ? source.file.type : null)\n              };\n              _context.next = 10;\n              return DefaultController.saveBase64(name, newSource, options);\n\n            case 10:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function () {\n      return _saveFile.apply(this, arguments);\n    };\n  }(),\n  saveBase64: function saveBase64(name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'base64') {\n      throw new Error('saveBase64 can only be used with Base64-type sources.');\n    }\n\n    var data\n    /*: { base64: any, _ContentType?: any, fileData: Object }*/\n    = {\n      base64: source.base64,\n      fileData: {\n        ipfs: options.ipfs,\n        metadata: _objectSpread({}, options.metadata),\n        tags: _objectSpread({}, options.tags)\n      }\n    };\n    delete options.metadata;\n    delete options.tags;\n\n    if (source.type) {\n      data._ContentType = source.type;\n    }\n\n    var path = \"files/\".concat(name);\n    return _CoreManager.default.getRESTController().request('POST', path, data, options);\n  },\n  download: function download(uri, options) {\n    if (XHR) {\n      return this.downloadAjax(uri, options);\n    }\n\n    return _promise.default.reject('Cannot make a request: No definition of XMLHttpRequest was found.');\n  },\n  downloadAjax: function downloadAjax(uri, options) {\n    return new _promise.default(function (resolve, reject) {\n      var xhr = new XHR();\n      xhr.open('GET', uri, true);\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onerror = function (e) {\n        reject(e);\n      };\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState !== xhr.DONE) {\n          return;\n        }\n\n        if (!this.response) {\n          return resolve({});\n        }\n\n        var bytes = new Uint8Array(this.response);\n        resolve({\n          base64: (0, _ParseFileEncode.encodeBase64)(bytes),\n          contentType: xhr.getResponseHeader('content-type')\n        });\n      };\n\n      options.requestTask(xhr);\n      xhr.send();\n    });\n  },\n  deleteFile: function deleteFile(name\n  /*: string*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    var headers = {\n      'X-Parse-Application-ID': _CoreManager.default.get('APPLICATION_ID')\n    };\n\n    if (options.useMasterKey) {\n      headers['X-Parse-Master-Key'] = _CoreManager.default.get('MASTER_KEY');\n    }\n\n    var url = _CoreManager.default.get('SERVER_URL');\n\n    if (url[url.length - 1] !== '/') {\n      url += '/';\n    }\n\n    url += \"files/\".concat(name);\n    return _CoreManager.default.getRESTController().ajax('DELETE', url, '', headers).catch(function (response) {\n      // TODO: return JSON object in server\n      if (!response || response === 'SyntaxError: Unexpected end of JSON input') {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getRESTController().handleError(response);\n    });\n  },\n  _setXHR: function _setXHR(xhr\n  /*: any*/\n  ) {\n    XHR = xhr;\n  },\n  _getXHR: function _getXHR() {\n    return XHR;\n  }\n};\nmodule.exports = DefaultController;","map":null,"metadata":{},"sourceType":"script"}