{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _isInteger = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/number/is-integer\"));\n\nvar supportedTypes = ['native', 'erc20', 'erc721', 'erc1155'];\nvar ERC1155TransferABI = [{\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'id',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: 'data',\n    type: 'bytes'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'safeTransferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'id',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'transferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}];\nvar ERC721TransferABI = [{\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'tokenId',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'safeTransferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'tokenId',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'transferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}];\nvar ERC20TransferABI = [{\n  constant: false,\n  inputs: [{\n    name: '_to',\n    type: 'address'\n  }, {\n    name: '_value',\n    type: 'uint256'\n  }],\n  name: 'transfer',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [{\n    name: '_owner',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    name: 'balance',\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\nvar tokenParams = {\n  native: {\n    receiver: '',\n    amount: ''\n  },\n  erc20: {\n    contractAddress: '',\n    receiver: '',\n    amount: ''\n  },\n  erc721: {\n    contractAddress: '',\n    receiver: '',\n    tokenId: ''\n  },\n  erc1155: {\n    contractAddress: '',\n    receiver: '',\n    tokenId: '',\n    amount: ''\n  }\n};\n\nvar isNotEmpty = function isNotEmpty(value) {\n  return typeof value !== 'undefined' && value ? true : false;\n};\n\nvar validateInput = function validateInput(type, payload) {\n  var errors = [];\n  var parameters = tokenParams[type];\n\n  for (var _i = 0, _Object$keys = (0, _keys.default)(parameters); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (!isNotEmpty(payload[key])) {\n      errors.push(\"\".concat(key, \" is required\"));\n    }\n  }\n\n  if (errors.length > 0) {\n    throw errors;\n  }\n};\n\nvar isSupportedType = function isSupportedType(type) {\n  if ((0, _indexOf.default)(supportedTypes).call(supportedTypes, type) === -1) throw 'Unsupported type';\n  return true;\n};\n\nvar isUint256 = function isUint256(tokenId) {\n  if (!(0, _isInteger.default)(+tokenId) || +tokenId < 0) throw new Error('Invalid token Id');\n  return true;\n};\n\nmodule.exports = {\n  abi: {\n    erc1155: ERC1155TransferABI,\n    erc721: ERC721TransferABI,\n    erc20: ERC20TransferABI\n  },\n  validateInput: validateInput,\n  isSupportedType: isSupportedType,\n  isNotEmpty: isNotEmpty,\n  isUint256: isUint256\n};","map":null,"metadata":{},"sourceType":"script"}