{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-bitwise */\n\nfunction b64Digit(number\n/*: number*/\n)\n/*: string*/\n{\n  if (number < 26) {\n    return String.fromCharCode(65 + number);\n  }\n\n  if (number < 52) {\n    return String.fromCharCode(97 + (number - 26));\n  }\n\n  if (number < 62) {\n    return String.fromCharCode(48 + (number - 52));\n  }\n\n  if (number === 62) {\n    return '+';\n  }\n\n  if (number === 63) {\n    return '/';\n  }\n\n  throw new TypeError(\"Tried to encode large digit \".concat(number, \" in base64.\"));\n}\n\nfunction encodeBase64(bytes\n/*: Array<number>*/\n)\n/*: string*/\n{\n  var chunks = [];\n  chunks.length = Math.ceil(bytes.length / 3);\n\n  for (var i = 0; i < chunks.length; i++) {\n    var b1 = bytes[i * 3];\n    var b2 = bytes[i * 3 + 1] || 0;\n    var b3 = bytes[i * 3 + 2] || 0;\n    var has2 = i * 3 + 1 < bytes.length;\n    var has3 = i * 3 + 2 < bytes.length;\n    chunks[i] = [b64Digit(b1 >> 2 & 0x3f), b64Digit(b1 << 4 & 0x30 | b2 >> 4 & 0x0f), has2 ? b64Digit(b2 << 2 & 0x3c | b3 >> 6 & 0x03) : '=', has3 ? b64Digit(b3 & 0x3f) : '='].join('');\n  }\n\n  return chunks.join('');\n}\n\nmodule.exports = {\n  encodeBase64: encodeBase64,\n  b64Digit: b64Digit\n};","map":null,"metadata":{},"sourceType":"script"}