{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"@babel/runtime-corejs3/helpers/typeof\");\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController2 = _interopRequireDefault(require(\"./RESTController\"));\n\nvar _MoralisWeb2 = _interopRequireDefault(require(\"./MoralisWeb3\"));\n\nvar _ethers = require(\"ethers\");\n\nvar _filterConsole = require(\"./filterConsole\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar _require = require('./utils'),\n    checkForSdkUpdates = _require.checkForSdkUpdates,\n    trackEvent = _require.trackEvent,\n    TrackingEventName = _require.TrackingEventName,\n    getSubdomain = _require.getSubdomain;\n/**\n * Contains all Moralis API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nvar Moralis = /*#__PURE__*/function (_MoralisWeb) {\n  (0, _inherits2.default)(Moralis, _MoralisWeb);\n\n  var _super = _createSuper(Moralis);\n\n  function Moralis() {\n    (0, _classCallCheck2.default)(this, Moralis);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Moralis, null, [{\n    key: \"start\",\n    value:\n    /**\n     * Call this method to initialize all moralis instances (Moralis, Web3Api, plugins).\n     *\n     * @param {object} options Your Moralis Application ID and Server URL. Moralis.start({serverUrl,appId})\n     * @static\n     */\n    function () {\n      var _start = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options) {\n        var appId, serverUrl, plugins, javascriptKey, masterKey, moralisSecret, apiKey, trackOptions, _yield$this$getApiKey, web3ApiKey, speedyNodeApiKey;\n\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                appId = options.appId, serverUrl = options.serverUrl, plugins = options.plugins, javascriptKey = options.javascriptKey, masterKey = options.masterKey, moralisSecret = options.moralisSecret;\n\n                if (serverUrl) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Moralis.start failed: serverUrl is required\");\n\n              case 4:\n                if (appId) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Moralis.start failed: appId is required\");\n\n              case 6:\n                if (moralisSecret) {\n                  console.warn('Moralis.start warning: Using moralisSecret on the browser enviroment reveals critical information.');\n                }\n\n                _context.next = 18;\n                break;\n\n              case 9:\n                if (!moralisSecret) {\n                  _context.next = 18;\n                  break;\n                }\n\n                this.moralisSecret = moralisSecret;\n                _context.next = 13;\n                return this.getApiKeys(moralisSecret);\n\n              case 13:\n                _yield$this$getApiKey = _context.sent;\n                web3ApiKey = _yield$this$getApiKey.web3ApiKey;\n                speedyNodeApiKey = _yield$this$getApiKey.speedyNodeApiKey;\n                apiKey = web3ApiKey;\n                this.speedyNodeApiKey = speedyNodeApiKey;\n\n              case 18:\n                this.initialize(appId, javascriptKey, masterKey);\n                this.serverURL = serverUrl;\n                this.Web3API.initialize({\n                  serverUrl: serverUrl,\n                  apiKey: apiKey,\n                  Moralis: Moralis\n                });\n                this.SolanaAPI.initialize({\n                  serverUrl: serverUrl,\n                  apiKey: apiKey,\n                  Moralis: Moralis\n                });\n\n                if (!(appId && serverUrl)) {\n                  _context.next = 28;\n                  break;\n                }\n\n                trackOptions = {\n                  subdomain: getSubdomain(serverUrl),\n                  sdk_type: 'javascript',\n                  sdk_version: \"1.9.0\",\n                  sdk_enviroment: \"browser\",\n                  appId: appId\n                };\n                _context.next = 26;\n                return this.initPlugins(plugins);\n\n              case 26:\n                _context.next = 29;\n                break;\n\n              case 28:\n                trackOptions = {\n                  sdk_type: 'javascript',\n                  sdk_version: \"1.9.0\",\n                  sdk_enviroment: \"browser\"\n                };\n\n              case 29:\n                // Check if SDK is updated\n                checkForSdkUpdates(); // Track start function call\n\n                trackEvent(TrackingEventName.START_FUNCTION, serverUrl ? getSubdomain(serverUrl) : null, trackOptions);\n\n              case 31:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _start.apply(this, arguments);\n      };\n    }()\n    /**\n     * Call this method to get apiKeys using moralis secret.\n     *\n     * @param {string} moralisSecret Your MoralisSecret\n     * @static\n     */\n\n  }, {\n    key: \"getApiKeys\",\n    value: function () {\n      var _getApiKeys = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(moralisSecret) {\n        var _RESTController, response;\n\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _RESTController = _CoreManager.default.getRESTController();\n                _context2.next = 4;\n                return _RESTController.ajax('GET', 'https://admin.moralis.io/api/publics/apiKeys', null, {\n                  'moralis-secret': moralisSecret,\n                  Accept: 'application/json',\n                  'Content-Type': 'application/json'\n                });\n\n              case 4:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response.response.result);\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw new Error(\"Could not fetch keys with moralisSecret\");\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 8]]);\n      }));\n\n      return function () {\n        return _getApiKeys.apply(this, arguments);\n      };\n    }()\n    /**\n     * Call this method first to set up your authentication tokens for Moralis.\n     *\n     * @param {string} applicationId Your Moralis Application ID.\n     * @param {string} [javaScriptKey] Your Moralis JavaScript Key (Not needed for moralis-server)\n     * @param {string} [masterKey] Your Moralis Master Key. (Node.js only!)\n     * @static\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function value(applicationId\n    /*: string*/\n    , javaScriptKey\n    /*: string*/\n    ) {\n      if (\"browser\" === 'browser' && _CoreManager.default.get('IS_NODE') && !process.env.SERVER_RENDERING) {\n        /* eslint-disable no-console */\n        console.log(\"Moralis: It looks like you're using the browser version of the SDK in a \" + \"node.js environment. You should require('moralis/node') instead.\");\n        /* eslint-enable no-console */\n      }\n\n      Moralis._initialize(applicationId, javaScriptKey);\n    }\n  }, {\n    key: \"_initialize\",\n    value: function value(applicationId\n    /*: string*/\n    , javaScriptKey\n    /*: string*/\n    , masterKey\n    /*: string*/\n    ) {\n      _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n      _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n      _CoreManager.default.set('MASTER_KEY', masterKey);\n\n      _CoreManager.default.set('USE_MASTER_KEY', false);\n    }\n    /**\n     * Call this method to set your AsyncStorage engine\n     * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n     * is not provided at a stable path and changes over versions.\n     *\n     * @param {AsyncStorage} storage a react native async storage.\n     * @static\n     */\n\n  }, {\n    key: \"setAsyncStorage\",\n    value: function value(storage\n    /*: any*/\n    ) {\n      _CoreManager.default.setAsyncStorage(storage);\n    }\n    /**\n     * Call this method to set your LocalDatastoreStorage engine\n     * If using React-Native use {@link Moralis.setAsyncStorage Moralis.setAsyncStorage()}\n     *\n     * @param {LocalDatastoreController} controller a data storage.\n     * @static\n     */\n\n  }, {\n    key: \"setLocalDatastoreController\",\n    value: function value(controller\n    /*: any*/\n    ) {\n      _CoreManager.default.setLocalDatastoreController(controller);\n    }\n    /**\n     * @member {string} Moralis.applicationId\n     * @static\n     */\n\n  }, {\n    key: \"applicationId\",\n    get: function get() {\n      return _CoreManager.default.get('APPLICATION_ID');\n    }\n    /**\n     * @member {string} Moralis.javaScriptKey\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('APPLICATION_ID', value);\n    }\n  }, {\n    key: \"javaScriptKey\",\n    get: function get() {\n      return _CoreManager.default.get('JAVASCRIPT_KEY');\n    }\n    /**\n     * @member {string} Moralis.masterKey\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('JAVASCRIPT_KEY', value);\n    }\n  }, {\n    key: \"masterKey\",\n    get: function get() {\n      return _CoreManager.default.get('MASTER_KEY');\n    }\n    /**\n     * @member {string} Moralis.serverURL\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('MASTER_KEY', value);\n    }\n  }, {\n    key: \"serverURL\",\n    get: function get() {\n      return _CoreManager.default.get('SERVER_URL');\n    }\n    /**\n     * @member {string} Moralis.serverAuthToken\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('SERVER_URL', value);\n    }\n  }, {\n    key: \"serverAuthToken\",\n    get: function get() {\n      return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n    }\n    /**\n     * @member {string} Moralis.serverAuthType\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n    }\n  }, {\n    key: \"serverAuthType\",\n    get: function get() {\n      return _CoreManager.default.get('SERVER_AUTH_TYPE');\n    }\n    /**\n     * @member {string} Moralis.liveQueryServerURL\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n    }\n  }, {\n    key: \"liveQueryServerURL\",\n    get: function get() {\n      return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n    }\n    /**\n     * @member {string} Moralis.encryptedUser\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n    }\n  }, {\n    key: \"encryptedUser\",\n    get: function get() {\n      return _CoreManager.default.get('ENCRYPTED_USER');\n    }\n    /**\n     * @member {string} Moralis.secret\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('ENCRYPTED_USER', value);\n    }\n  }, {\n    key: \"secret\",\n    get: function get() {\n      return _CoreManager.default.get('ENCRYPTED_KEY');\n    }\n    /**\n     * @member {boolean} Moralis.idempotency\n     * @static\n     */\n    ,\n    set: function set(value) {\n      _CoreManager.default.set('ENCRYPTED_KEY', value);\n    }\n  }, {\n    key: \"idempotency\",\n    get: function get() {\n      return _CoreManager.default.get('IDEMPOTENCY');\n    },\n    set: function set(value) {\n      _CoreManager.default.set('IDEMPOTENCY', value);\n    }\n  }]);\n  return Moralis;\n}(_MoralisWeb2.default);\n\nMoralis.ACL = require('./ParseACL').default;\nMoralis.Analytics = require('./Analytics');\nMoralis.AnonymousUtils = require('./AnonymousUtils').default;\nMoralis.Cloud = require('./Cloud');\nMoralis.CLP = require('./ParseCLP').default;\nMoralis.CoreManager = require('./CoreManager');\nMoralis.Config = require('./ParseConfig').default;\nMoralis.Error = require('./ParseError').default;\nMoralis.FacebookUtils = require('./FacebookUtils').default;\nMoralis.File = require('./ParseFile').default;\nMoralis.GeoPoint = require('./ParseGeoPoint').default;\nMoralis.Polygon = require('./ParsePolygon').default;\nMoralis.Installation = require('./ParseInstallation').default;\nMoralis.LocalDatastore = require('./LocalDatastore');\nMoralis.Object = require('./ParseObject').default;\nMoralis.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nMoralis.Web3API = require('./MoralisWeb3Api').default;\nMoralis.SolanaAPI = require('./MoralisSolanaApi').default;\nMoralis.Push = require('./Push');\nMoralis.Query = require('./ParseQuery').default;\nMoralis.Relation = require('./ParseRelation').default;\nMoralis.Role = require('./ParseRole').default;\nMoralis.Schema = require('./ParseSchema').default;\nMoralis.Session = require('./ParseSession').default;\nMoralis.Storage = require('./Storage');\nMoralis.User = require('./ParseUser').default;\nMoralis.LiveQuery = require('./ParseLiveQuery').default;\nMoralis.LiveQueryClient = require('./LiveQueryClient').default;\nMoralis.Web3 = Moralis;\nMoralis.Units = require('./UnitConvert'); // Moralis.Web3 = require('./MoralisWeb3').default;\n\nMoralis.Elrond = require('./MoralisErd').default;\nMoralis.Erd = Moralis.Elrond;\nMoralis.Dot = require('./MoralisDot').default;\nMoralis.UI = require('./MoralisUI').default;\nMoralis.Chains = require('./Chains').default;\nMoralis.AbstractWeb3Connector = require('./Web3Connector/AbstractWeb3Connector').default;\n(0, _filterConsole.filterConsole)();\n\nMoralis._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nMoralis._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nMoralis._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nMoralis._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nMoralis._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nMoralis.enableLocalDatastore = function () {\n  Moralis.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isLocalDatastoreEnabled = function () {\n  return Moralis.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Moralis.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nMoralis.dumpLocalDatastore = function () {\n  if (!Moralis.LocalDatastore.isEnabled) {\n    console.log('Moralis: Moralis.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return _promise.default.resolve({});\n  }\n\n  return Moralis.LocalDatastore._getAllContents();\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nMoralis.enableEncryptedUser = function () {\n  Moralis.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isEncryptedUserEnabled = function () {\n  return Moralis.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController2.default); // For legacy requires, of the form `var Moralis = require('moralis').Moralis`\n\n\nMoralis.Moralis = Moralis;\nmodule.exports = Moralis;","map":null,"metadata":{},"sourceType":"script"}