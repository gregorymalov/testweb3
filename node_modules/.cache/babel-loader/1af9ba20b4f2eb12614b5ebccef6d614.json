{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _filter = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n/* eslint-disable no-console */\n\n/* global window */\n\n\nvar filteredWarnings = [// Optional dependencies, where we handle the dependency check on run-time\n\"Module not found: Can't resolve '@walletconnect/web3-provider'\", \"Module not found: Can't resolve 'magic-sdk'\", \"Module not found: Can't resolve '@web3auth/web3auth'\"];\n/**\n * Filters console messages that include text from the blacklist\n */\n\nvar filterConsole = function filterConsole() {\n  // Filter console.warn\n  var preservedConsoleWarn = console.warn;\n\n  console.warn = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var value = args ? args[0] : null; // For the current use-cases we only care about the first argument being string\n\n    if (!value || typeof value !== 'string') {\n      return preservedConsoleWarn.apply(console, args);\n    } // Raplace all types of single quotes to one format\n\n\n    value = value.replace('’', \"'\").replace('‘', \"'\").replace('’', \"'\"); // Filter out blacklisted strings\n\n    if ((0, _filter.default)(filteredWarnings).call(filteredWarnings, function (filter) {\n      return (0, _includes.default)(value).call(value, filter);\n    }).length >= 1) {\n      return;\n    } // Otherwise return default function\n\n\n    return preservedConsoleWarn.apply(console, args);\n  };\n};\n\nmodule.exports = {\n  filterConsole: filterConsole\n};","map":null,"metadata":{},"sourceType":"script"}